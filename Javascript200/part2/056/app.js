import { hello } from './hello.js';

hello('es6 module');

// import 키워드를 사용해 export 한 코드를 가지고 올 수 있다.

// 이렇게 하나의 모듈이 다른 모듈에게 내보낸 코드를 가져오면 두 모듈은 서로 의존하게 되어 의존 관계가 형성되고 여러 모듈들은 의존 관계를 맺어
// 의존 관계 그래프가 형성되게 된다. 그리고 의존관계 그래프에서는 최상의 루트가 필요한데 이 루트 모듈이 애플리케이션의 시작 지점이 된다.

// ES6의 모듈로 정의된 파일들은 실행하는 방법에 따라 두 가지로 분류
// 런타임 로딩 : 의존 관계가 형성된 모듈들을 애플리케이션이 구동 시점에 비동기 http 요청으로 불러오고 실행. 이때 모듈 로더가 필요한데 system.js나 require.js를 이용
// 번들링 : 의존관계가 형성된 모듈들을 하나의 파일로 묶어준다. 그리고 애플리케이션이 구동할 때 묶여진 이 파일을 로드.
//번들링은 개발 시점에 이루어지게 되고 브라우저에서 이루어지지 않도 대체로 node.js 환경에서 이루어지게 된다. 대표적인 모듈 번들러로는 왭팩이 있다.
//크롬61 버전부터 <script type=module>을 지원하면서 별도의 모듈 로더 없이 ES6 모듈을 사용할 수 있다.